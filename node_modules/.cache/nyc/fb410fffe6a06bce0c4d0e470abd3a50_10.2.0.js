var cov_v013zohpc=function(){var path="/home/bornevia/Doyok/utilities.js",hash="362a57f89b26904af977aa594d9c4fee289ac67e",global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/bornevia/Doyok/utilities.js",statementMap:{"0":{start:{line:1,column:0},end:{line:70,column:14}},"1":{start:{line:19,column:8},end:{line:21,column:9}},"2":{start:{line:20,column:12},end:{line:20,column:24}},"3":{start:{line:24,column:8},end:{line:26,column:9}},"4":{start:{line:25,column:12},end:{line:25,column:25}},"5":{start:{line:30,column:8},end:{line:32,column:9}},"6":{start:{line:31,column:12},end:{line:31,column:25}},"7":{start:{line:34,column:8},end:{line:57,column:9}},"8":{start:{line:36,column:12},end:{line:56,column:13}},"9":{start:{line:38,column:16},end:{line:40,column:17}},"10":{start:{line:39,column:20},end:{line:39,column:33}},"11":{start:{line:43,column:16},end:{line:45,column:17}},"12":{start:{line:44,column:20},end:{line:44,column:29}},"13":{start:{line:48,column:16},end:{line:50,column:17}},"14":{start:{line:49,column:20},end:{line:49,column:33}},"15":{start:{line:53,column:16},end:{line:55,column:17}},"16":{start:{line:54,column:20},end:{line:54,column:33}},"17":{start:{line:59,column:8},end:{line:64,column:9}},"18":{start:{line:61,column:12},end:{line:63,column:13}},"19":{start:{line:62,column:16},end:{line:62,column:29}},"20":{start:{line:65,column:8},end:{line:65,column:20}},"21":{start:{line:68,column:4},end:{line:68,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:1,column:1},end:{line:1,column:2}},loc:{start:{line:1,column:12},end:{line:70,column:1}},line:1},"1":{name:"equals",decl:{start:{line:17,column:13},end:{line:17,column:19}},loc:{start:{line:17,column:29},end:{line:66,column:5}},line:17}},branchMap:{"0":{loc:{start:{line:19,column:8},end:{line:21,column:9}},type:"if",locations:[{start:{line:19,column:8},end:{line:21,column:9}},{start:{line:19,column:8},end:{line:21,column:9}}],line:19},"1":{loc:{start:{line:24,column:8},end:{line:26,column:9}},type:"if",locations:[{start:{line:24,column:8},end:{line:26,column:9}},{start:{line:24,column:8},end:{line:26,column:9}}],line:24},"2":{loc:{start:{line:24,column:13},end:{line:24,column:67}},type:"binary-expr",locations:[{start:{line:24,column:13},end:{line:24,column:38}},{start:{line:24,column:42},end:{line:24,column:67}}],line:24},"3":{loc:{start:{line:30,column:8},end:{line:32,column:9}},type:"if",locations:[{start:{line:30,column:8},end:{line:32,column:9}},{start:{line:30,column:8},end:{line:32,column:9}}],line:30},"4":{loc:{start:{line:36,column:12},end:{line:56,column:13}},type:"if",locations:[{start:{line:36,column:12},end:{line:56,column:13}},{start:{line:36,column:12},end:{line:56,column:13}}],line:36},"5":{loc:{start:{line:38,column:16},end:{line:40,column:17}},type:"if",locations:[{start:{line:38,column:16},end:{line:40,column:17}},{start:{line:38,column:16},end:{line:40,column:17}}],line:38},"6":{loc:{start:{line:43,column:16},end:{line:45,column:17}},type:"if",locations:[{start:{line:43,column:16},end:{line:45,column:17}},{start:{line:43,column:16},end:{line:45,column:17}}],line:43},"7":{loc:{start:{line:48,column:16},end:{line:50,column:17}},type:"if",locations:[{start:{line:48,column:16},end:{line:50,column:17}},{start:{line:48,column:16},end:{line:50,column:17}}],line:48},"8":{loc:{start:{line:53,column:16},end:{line:55,column:17}},type:"if",locations:[{start:{line:53,column:16},end:{line:55,column:17}},{start:{line:53,column:16},end:{line:55,column:17}}],line:53},"9":{loc:{start:{line:61,column:12},end:{line:63,column:13}},type:"if",locations:[{start:{line:61,column:12},end:{line:63,column:13}},{start:{line:61,column:12},end:{line:63,column:13}}],line:61},"10":{loc:{start:{line:61,column:17},end:{line:61,column:65}},type:"binary-expr",locations:[{start:{line:61,column:17},end:{line:61,column:38}},{start:{line:61,column:42},end:{line:61,column:65}}],line:61}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();++cov_v013zohpc.s[0];(function(){++cov_v013zohpc.f[0];/**
     * Deep compare of two objects.
     *
     * Note that this does not detect cyclical objects as it should.
     * Need to implement that when this is used in a more general case. It's currently only used
     * in a place that guarantees no cyclical structures.
     *
     * @param {*} x
     * @param {*} y
     * @return {Boolean} Whether the two objects are equivalent, that is,
     *         every property in x is equal to every property in y recursively. Primitives
     *         must be strictly equal, that is "1" and 1, null an undefined and similar objects
     *         are considered different
     */function equals(x,y){++cov_v013zohpc.f[1];++cov_v013zohpc.s[1];// If both x and y are null or undefined and exactly the same
if(x===y){++cov_v013zohpc.b[0][0];++cov_v013zohpc.s[2];return true;}else{++cov_v013zohpc.b[0][1];}// If they are not strictly equal, they both need to be Objects
++cov_v013zohpc.s[3];if((++cov_v013zohpc.b[2][0],!(x instanceof Object))||(++cov_v013zohpc.b[2][1],!(y instanceof Object))){++cov_v013zohpc.b[1][0];++cov_v013zohpc.s[4];return false;}else{++cov_v013zohpc.b[1][1];}// They must have the exact same prototype chain, the closest we can do is
// test the constructor.
++cov_v013zohpc.s[5];if(x.constructor!==y.constructor){++cov_v013zohpc.b[3][0];++cov_v013zohpc.s[6];return false;}else{++cov_v013zohpc.b[3][1];}++cov_v013zohpc.s[7];for(var p in x){++cov_v013zohpc.s[8];// Inherited properties were tested using x.constructor === y.constructor
if(x.hasOwnProperty(p)){++cov_v013zohpc.b[4][0];++cov_v013zohpc.s[9];// Allows comparing x[ p ] and y[ p ] when set to undefined
if(!y.hasOwnProperty(p)){++cov_v013zohpc.b[5][0];++cov_v013zohpc.s[10];return false;}else{++cov_v013zohpc.b[5][1];}// If they have the same strict value or identity then they are equal
++cov_v013zohpc.s[11];if(x[p]===y[p]){++cov_v013zohpc.b[6][0];++cov_v013zohpc.s[12];continue;}else{++cov_v013zohpc.b[6][1];}// Numbers, Strings, Functions, Booleans must be strictly equal
++cov_v013zohpc.s[13];if(typeof x[p]!=="object"){++cov_v013zohpc.b[7][0];++cov_v013zohpc.s[14];return false;}else{++cov_v013zohpc.b[7][1];}// Objects and Arrays must be tested recursively
++cov_v013zohpc.s[15];if(!equals(x[p],y[p])){++cov_v013zohpc.b[8][0];++cov_v013zohpc.s[16];return false;}else{++cov_v013zohpc.b[8][1];}}else{++cov_v013zohpc.b[4][1];}}++cov_v013zohpc.s[17];for(p in y){++cov_v013zohpc.s[18];// allows x[ p ] to be set to undefined
if((++cov_v013zohpc.b[10][0],y.hasOwnProperty(p))&&(++cov_v013zohpc.b[10][1],!x.hasOwnProperty(p))){++cov_v013zohpc.b[9][0];++cov_v013zohpc.s[19];return false;}else{++cov_v013zohpc.b[9][1];}}++cov_v013zohpc.s[20];return true;};++cov_v013zohpc.s[21];exports.equals=equals;}).call(this);